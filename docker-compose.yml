version: '3'

services:
  app:
    build:
      context: .
      target: production
    container_name: go-app
    environment:
      - DB_HOST=go-blog-db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - DB_SSLMODE=${DB_SSLMODE}
      - APP_ENV=${APP_ENV}
      - PORT=${PORT}
      - LOG_FILE=${LOG_FILE}
      - MAX_SIZE_MB=${MAX_SIZE_MB}
      - MAX_BACKUPS=${MAX_BACKUPS}
      - MAX_AGE_DAYS=${MAX_AGE_DAYS}
      - COMPRESS=${COMPRESS}
      - LOG_LEVEL=${LOG_LEVEL}
      - DEBUG_MODE=${DEBUG_MODE}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-network

  postgres:
    image: postgres:bookworm
    restart: always
    container_name: go-blog-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pg-data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - go-network

volumes:
  pg-data:

networks:
  go-network:
    driver: bridge